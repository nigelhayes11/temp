# Bu arac @keyiflerolsun tarafindan | @KekikAkademi icin yazilmistir.

name: Yayın Kontrolü

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  schedule:
    - cron: 00 00 * * *
  push:
    paths:
      - KONTROL.py
      - .github/workflows/Kontrol.yml
      - Kanallar/KekikAkademi.m3u

jobs:
  YayinKontrol:
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    permissions:
      contents: write
      issues  : write

    steps:
      - name : Depo Kontrolü
        uses : actions/checkout@v4.2.2

      - name : Python 3.11.8 Yükle
        uses : actions/setup-python@v5.3.0
        with :
          python-version: 3.11.8

      - name : Python Sürümünü Göster
        run  : python -c "import sys; print(sys.version)"

      - name : Gereksinimleri Yükle
        run  : |
          python -m pip install --upgrade pip
          pip install -U setuptools wheel Kekik httpx jq

      - name : Betiği Çalıştır
        run  : |
          python KONTROL.py

      - name : Hata Kontrolü
        id   : hata_kontrol
        run  : |
          if [ -f HATALAR.md ]; then
            echo "hata=true" >> $GITHUB_OUTPUT
          else
            echo "hata=false" >> $GITHUB_OUTPUT
          fi

      - name : Mevcut Issue'ları Kontrol Et ve Gerekirse Kapat
        id   : issue_kontrol
        run  : |
          echo "Mevcut issue'lar kontrol ediliyor..."
          mevcut_issue=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            | jq -r '.[] | select(.title == "⚠️ Kontrol Edilmesi Gereken Yayınlar") | .number')

          if [ -n "$mevcut_issue" ]; then
            echo "Mevcut issue bulundu: #$mevcut_issue"

            mevcut_body=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/$mevcut_issue \
              | jq -r '.body')
            mevcut_body_normalize=$(echo "$mevcut_body" | tr -d '\n' | tr -d '\r' | sed 's/[[:space:]]//g')

            yeni_body=$(cat HATALAR.md 2>/dev/null || echo "")
            yeni_body_normalize=$(echo "$yeni_body" | tr -d '\n' | tr -d '\r' | sed 's/[[:space:]]//g')

            if [ "${{ steps.hata_kontrol.outputs.hata }}" == "false" ]; then
              kapatma_nedeni="Hata yok."
            elif [ "$mevcut_body_normalize" != "$yeni_body_normalize" ]; then
              kapatma_nedeni="Hatalar farklı."
            fi

            if [ -n "$kapatma_nedeni" ]; then
              echo "Mevcut issue kapatılacak... Kapatma nedeni: $kapatma_nedeni"
              curl -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/issues/$mevcut_issue \
                -d '{"state":"closed"}'
              echo "issue=true" >> $GITHUB_OUTPUT
            else
              echo "Mevcut issue ile aynı, kapatma gerekmiyor."
              echo "issue=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Mevcut bir issue bulunamadı."
            echo "issue=true" >> $GITHUB_OUTPUT
          fi

      - name : Issue Aç
        if   : steps.hata_kontrol.outputs.hata == 'true' && steps.issue_kontrol.outputs.issue == 'true'
        run  : |
          hatalar=$(cat HATALAR.md)
          issue_body=$(echo "$hatalar" | jq -sR .)

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d '{"title":"⚠️ Kontrol Edilmesi Gereken Yayınlar","body":'"$issue_body"',"labels":["help wanted"]}'
